// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlog.Infrastructure.Persistence.Context;

#nullable disable

namespace MyBlog.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(MyBlogDbContext))]
    [Migration("20220403125154_blogschema")]
    partial class blogschema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("blog")
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyBlog.Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogAuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlogName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("BlogId");

                    b.HasIndex("AuthorUserId");

                    b.HasIndex("BlogName")
                        .IsUnique();

                    b.ToTable("MyBlog.Infrastructure.Persistence.Context.IMyBlogDbContext.Blogs", "blog");
                });

            modelBuilder.Entity("MyBlog.Domain.Entities.BlogPost", b =>
                {
                    b.Property<Guid>("BlogPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTimeOffset?>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("BlogPostId");

                    b.HasIndex("AuthorUserId");

                    b.HasIndex("BlogId");

                    b.ToTable("MyBlog.Infrastructure.Persistence.Context.IMyBlogDbContext.BlogPosts", "blog");
                });

            modelBuilder.Entity("MyBlog.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EmailAdress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("MyBlog.Infrastructure.Persistence.Context.IMyBlogDbContext.Users", "blog");
                });

            modelBuilder.Entity("MyBlog.Domain.Entities.Blog", b =>
                {
                    b.HasOne("MyBlog.Domain.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("MyBlog.Domain.Entities.BlogPost", b =>
                {
                    b.HasOne("MyBlog.Domain.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Domain.Entities.Blog", null)
                        .WithMany("BlogPosts")
                        .HasForeignKey("BlogId")
                        .HasConstraintName("FK_MyBlog.Infrastructure.Persistence.Context.IMyBlogDbContext.BlogPosts_MyBlog.Infrastructure.Persistence.Context.IMyBlogDbCon~1");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("MyBlog.Domain.Entities.Blog", b =>
                {
                    b.Navigation("BlogPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
